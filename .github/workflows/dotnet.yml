name: CargoHub API CI

on:
  push:
    branches:
      - main
      - development
      - release
  pull_request:
    branches:
      - main
      - development

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Run Code Formatter Verify No Changes
        run: dotnet format --verify-no-changes > lint-results.txt 2>&1 --verbosity diagnostic
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: Lint results
          path: lint-results.txt
          retention-days: 5
        if: ${{ failure() }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build Project
        run: dotnet build > build-results.txt 2>&1 --no-restore -nowarn:8602
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: Build results
          path: build-results.txt
          retention-days: 5
        if: ${{ failure() }}

  unit_tests_and_code_coverage:
    name: Run Unit Tests & Generate Code Coverage Report
    runs-on: ubuntu-latest
    environment: 
      name: keys
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Run Unit Tests & Generate Report
        run: dotnet test api.Tests/api.Tests.csproj --collect:"XPlat Code Coverage"
      - name: ReportGenerator for Unit Tests
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.1
        with:
          reports: 'api.Tests/TestResults/*/coverage.cobertura.xml'
          targetdir: 'api.Tests/Report'
          reporttypes: 'MarkdownSummaryGithub'
          classfilters: '+EnumUtil' # Temporarily
      - name: Upload Unit Tests Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReportUnitTests
          path: 'api.Tests/Report'
      - name: Add Unit Test Coverage Report to Summary
        run: cat api.Tests/Report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

  integration_tests_and_code_coverage:
    name: Run Integration Tests & Generate Code Coverage Report
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Set up .env.json file
        run: |
          echo '{' > .env.json
          echo '  "API_ADMIN": "${{ secrets.API_ADMIN }}",' >> .env.json
          echo '}' >> .env.json
      - name: Run Integration Tests & Generate Report
        run: dotnet test api.IntegrationTests/api.IntegrationTests.csproj --collect:"XPlat Code Coverage"
      - name: ReportGenerator for Integration Tests
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.1
        with:
          reports: 'api.IntegrationTests/TestResults/*/coverage.cobertura.xml'
          targetdir: 'api.IntegrationTests/Report'
          reporttypes: 'MarkdownSummaryGithub'
      - name: Upload Integration Tests Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReportIntegrationTests
          path: 'api.IntegrationTests/Report'
      - name: Add Integration Test Coverage Report to Summary
        run: cat api.IntegrationTests/Report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
  

  dotnet_publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - unit_tests_and_code_coverage
      - integration_tests_and_code_coverage
    if: ${{ github.ref_name == 'release' }} 
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Dotnet publish
        run: dotnet publish -c Release -r linux-x64 --self-contained -o ./release
      - name: Upload Linux x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-artifact
          path: ./release
      - name: Release notification Discord
        run: |
          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d '{
          "content": "@everyone",
          "embeds": [
            {
              "type": "rich",
              "title": "Er is een nieuwe release beschikbaar!",
              "description": "Een nieuwe Linux x64 artifact is beschikbaar voor download!",
              "color": 2123412,
              "thumbnail": {
                "url": "https://i.giphy.com/PqjTdvXImZQfcmTYEO.webp"
              },
              "author": {
                "name": "${{ github.actor }}",
                "url": "https://github.com/${{ github.actor_id }}",
                "icon_url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
              },
              "url": "https://github.com/ahmetDev7/projecthr/actions"
            }
          ]
          }' ${{ secrets.DISCORD_WEBHOOK_URL }})
        if: ${{ success() }}